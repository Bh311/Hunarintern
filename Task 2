import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# Upload the dataset
print("Please upload the house price data CSV file:")
uploaded = files.upload()

# Load the dataset
dataset_path = next(iter(uploaded))  # Get the file name of the uploaded file
df = pd.read_csv(dataset_path)

# Check for missing values
print('Missing values in each column:')
print(df.isnull().sum())

# Fill missing values or drop columns/rows with missing values
df = df.dropna()

# Check for duplicates and remove them
df = df.drop_duplicates()

# Display the first few rows of the cleaned dataset
print('First few rows of the cleaned dataset:')
print(df.head())

# Select features and target variable
X = df.drop('price', axis=1)  # Assuming 'price' is the column to be predicted
y = df['price']

# Ensure all features are numeric
X = pd.get_dummies(X, drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plot actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs. Predicted Prices')
plt.show()

# Upload the different test dataset
print("Please upload the different housing data CSV file:")
uploaded = files.upload()

# Load the different test dataset
different_test_dataset_path = next(iter(uploaded))  # Get the file name of the uploaded file
different_test_df = pd.read_csv(different_test_dataset_path)

# Preprocess the different test dataset
different_test_df = different_test_df.dropna()
different_test_df = different_test_df.drop_duplicates()

# Select features and target variable
X_different_test = different_test_df.drop('price', axis=1)
y_different_test = different_test_df['price']

# Ensure all features are numeric
X_different_test = pd.get_dummies(X_different_test, drop_first=True)

# Make sure the columns in the different test set match the training set
X_different_test = X_different_test.reindex(columns=X_train.columns, fill_value=0)

# Make predictions on the different test dataset
y_different_pred = model.predict(X_different_test)

# Evaluate the model on the different test dataset
different_mse = mean_squared_error(y_different_test, y_different_pred)
different_r2 = r2_score(y_different_test, y_different_pred)

print(f'Mean Squared Error on different test dataset: {different_mse}')
print(f'R-squared on different test dataset: {different_r2}')

# Plot actual vs. predicted values for the different test dataset
plt.figure(figsize=(10, 6))
plt.scatter(y_different_test, y_different_pred, alpha=0.5)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs. Predicted Prices on Different Test Dataset')
plt.show()
